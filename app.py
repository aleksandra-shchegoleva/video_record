from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import os
import json
from datetime import datetime
import logging
from pathlib import Path

app = Flask(__name__)
CORS(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
UPLOAD_FOLDER = 'video_interviews'
BASE_DIR = Path(__file__).parent
VIDEOS_DIR = BASE_DIR / UPLOAD_FOLDER

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤–∏–¥–µ–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
VIDEOS_DIR.mkdir(exist_ok=True)

class LocalVideoStorage:
    def __init__(self, base_path):
        self.base_path = Path(base_path)
        self.base_path.mkdir(exist_ok=True)
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {self.base_path.absolute()}")
    
    def create_session_folder(self, session_id):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        current_date = datetime.now().strftime('%Y-%m-%d')
        session_folder = self.base_path / current_date / session_id
        session_folder.mkdir(parents=True, exist_ok=True)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_folder}")
        return session_folder
    
    def save_video(self, video_data, session_id, question_number, question_text):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ"""
        try:
            session_folder = self.create_session_folder(session_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime('%H-%M-%S')
            filename = f'question_{question_number}_{timestamp}.webm'
            file_path = session_folder / filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª
            with open(file_path, 'wb') as f:
                f.write(video_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = {
                'session_id': session_id,
                'question_number': int(question_number),
                'question_text': question_text,
                'filename': filename,
                'timestamp': datetime.now().isoformat(),
                'file_path': str(file_path.relative_to(self.base_path)),
                'file_size': len(video_data)
            }
            
            metadata_filename = f'question_{question_number}_metadata.json'
            metadata_path = session_folder / metadata_filename
            
            with open(metadata_path, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, ensure_ascii=False, indent=2)
            
            logger.info(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path} ({len(video_data)} bytes)")
            return {
                'success': True,
                'file_path': str(file_path.relative_to(self.base_path)),
                'absolute_path': str(file_path),
                'metadata': metadata
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def get_session_info(self, session_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏"""
        try:
            current_date = datetime.now().strftime('%Y-%m-%d')
            session_folder = self.base_path / current_date / session_id
            
            if not session_folder.exists():
                return {'success': False, 'error': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
            
            video_files = list(session_folder.glob('*.webm'))
            metadata_files = list(session_folder.glob('*_metadata.json'))
            
            videos_info = []
            for video_file in video_files:
                file_info = {
                    'filename': video_file.name,
                    'size': video_file.stat().st_size,
                    'created': datetime.fromtimestamp(video_file.stat().st_ctime).isoformat()
                }
                videos_info.append(file_info)
            
            return {
                'success': True,
                'session_id': session_id,
                'total_questions': len(video_files),
                'session_folder': str(session_folder.relative_to(self.base_path)),
                'videos': videos_info
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏: {str(e)}")
            return {'success': False, 'error': str(e)}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage = LocalVideoStorage(VIDEOS_DIR)

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    try:
        with open('index.html', 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        return """
        <h1>–§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
        <p>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª index.html –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ app.py</p>
        """

@app.route('/upload-video', methods=['POST'])
def upload_video():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    try:
        if 'video' not in request.files:
            return jsonify({'error': '–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
        
        video_file = request.files['video']
        session_id = request.form.get('session_id', 'unknown')
        question_number = request.form.get('question_number', '1')
        question_text = request.form.get('question_text', '')
        
        if video_file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
        video_data = video_file.read()
        
        if len(video_data) == 0:
            return jsonify({'error': '–§–∞–π–ª –ø—É—Å—Ç–æ–π'}), 400
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        result = storage.save_video(video_data, session_id, question_number, question_text)
        
        if result['success']:
            logger.info(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: {result['file_path']}")
            return jsonify({
                'success': True,
                'message': '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ',
                'file_path': result['file_path'],
                'file_size': result['metadata']['file_size']
            })
        else:
            return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {result["error"]}'}), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {str(e)}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/session-info/<session_id>')
def session_info(session_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏"""
    try:
        result = storage.get_session_info(session_id)
        if result['success']:
            return jsonify(result)
        else:
            return jsonify({'error': result['error']}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/videos/<path:filename>')
def serve_video(filename):
    """–û—Ç–¥–∞—á–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤"""
    try:
        return send_from_directory(VIDEOS_DIR, filename)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–¥–∞—á–∏ —Ñ–∞–π–ª–∞ {filename}: {str(e)}")
        return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

@app.route('/list-sessions')
def list_sessions():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
    try:
        sessions = []
        if VIDEOS_DIR.exists():
            for date_folder in VIDEOS_DIR.iterdir():
                if date_folder.is_dir():
                    for session_folder in date_folder.iterdir():
                        if session_folder.is_dir():
                            video_count = len(list(session_folder.glob('*.webm')))
                            sessions.append({
                                'session_id': session_folder.name,
                                'date': date_folder.name,
                                'video_count': video_count,
                                'path': str(session_folder.relative_to(VIDEOS_DIR))
                            })
        
        return jsonify({
            'success': True,
            'sessions': sorted(sessions, key=lambda x: x['date'], reverse=True)
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –≤–∏–¥–µ–æ-–∏–Ω—Ç–µ—Ä–≤—å—é...")
    print(f"üìÅ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {VIDEOS_DIR.absolute()}")
    print("‚úÖ –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("üì± –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS")
    
    app.run(debug=True, host='0.0.0.0', port=5000)